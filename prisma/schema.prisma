datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Student {
    id                        String                    @id @default(uuid())
    name                      String?
    studentId                 String                    @unique
    hashedPassword            String
    createdAt                 DateTime                  @default(now())
    updatedAt                 DateTime?                 @updatedAt
    accounts                  StudentAccount[]          // 学生アカウント
    answers                   Answer[]                  // 生徒が回答した内容を保持
    notifications             Notification[]            // 生徒が受け取る通知
    assignedQuestions         AssignedQuestion[]        // 出題された問題を管理
    incorrectAssignedQuestions IncorrectAssignedQuestion[] // 間違えた問題を管理
}

model Admin {
    id                        String                    @id @default(uuid())
    name                      String?
    email                     String?                   @unique
    hashedPassword            String?
    createdAt                 DateTime                  @default(now())
    updatedAt                 DateTime?                 @updatedAt
    accounts                  AdminAccount[]            // 管理者アカウント
    questions                 Question[]                // 管理者が作成した問題を保持
    notifications             Notification[]            // 管理者が送信する通知
}

model StudentAccount {
    id                      String   @id @default(uuid())
    studentId               String
    type                    String
    Studentprovider         String
    StudentproviderAccountId String
    accessToken             String?
    expiresAt               DateTime?
    tokenType               String?
    student                 Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

    @@unique([Studentprovider, StudentproviderAccountId])
}

model AdminAccount {
    id                      String   @id @default(uuid())
    adminId                 String
    type                    String
    Adminprovider           String
    AdminproviderAccountId  String
    accessToken             String?
    expiresAt               DateTime?
    tokenType               String?
    admin                   Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

    @@unique([Adminprovider, AdminproviderAccountId])
}

model Question {
    id                        String                    @id @default(uuid())
    text                      String                   // 問題文
    correctAnswer             String?                  // 正解を保持
    createdBy                 Admin                    @relation(fields: [adminId], references: [id])
    adminId                   String                   // 作成者 (Admin) のID
    createdAt                 DateTime                 @default(now())
    updatedAt                 DateTime?                @updatedAt
    answers                   Answer[]                 // この問題への回答を保持
    assignedQuestions         AssignedQuestion[]       // 出題された問題を管理
    incorrectAssignedQuestions IncorrectAssignedQuestion[] // 間違えた問題を管理
}

model Answer {
    id               String     @id @default(uuid())
    student          Student    @relation(fields: [studentId], references: [id])
    studentId        String     // 回答者 (Student) のID
    question         Question   @relation(fields: [questionId], references: [id])
    questionId       String     // 回答した問題のID
    isCorrect        Boolean?   // 正解: true, 不正解: false, 未回答: null
    submittedAnswer  String?    // 提出した回答内容
    answeredAt       DateTime?  // 回答日時

    @@unique([studentId, questionId]) // 複合一意キー
}

model Notification {
    id          String    @id @default(uuid())
    message     String    // 通知メッセージ
    isRead      Boolean   @default(false) // 既読フラグ
    createdAt   DateTime  @default(now())
    admin       Admin?    @relation(fields: [adminId], references: [id])   // 通知を送信した管理者
    adminId     String?
    student     Student?  @relation(fields: [studentId], references: [id]) // 通知を受け取る生徒
    studentId   String?
}

model AssignedQuestion {
    id          String    @id @default(uuid())
    studentId   String    // 生徒ID
    questionId  String    // 問題ID
    isAnswered  Boolean   @default(false) // 回答済みかどうか
    isCorrect   Boolean?  // 回答が正解だったかどうか
    answeredAt  DateTime? // 回答日時
    question    Question  @relation(fields: [questionId], references: [id])
    student     Student   @relation(fields: [studentId], references: [id])

    @@unique([studentId, questionId]) // 生徒ごとにユニーク
}

model IncorrectAssignedQuestion {
    id          String    @id @default(uuid())
    studentId   String    // 生徒ID
    questionId  String    // 問題ID
    isAnswered  Boolean   @default(false) // 回答済みかどうか
    isCorrect   Boolean?  // 回答が正解だったかどうか
    answeredAt  DateTime? // 回答日時
    question    Question  @relation(fields: [questionId], references: [id])
    student     Student   @relation(fields: [studentId], references: [id])

    @@unique([studentId, questionId]) // 生徒ごとにユニーク
}
