datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Student {
    id                        String                    @id @default(uuid())
    name                      String?
    studentId                 String                    @unique
    hashedPassword            String
    createdAt                 DateTime                  @default(now())
    updatedAt                 DateTime?                 @updatedAt
    accounts                  StudentAccount[]          
    answers                   Answer[]                  
    notifications             Notification[]            
    assignedQuestions         AssignedQuestion[]        
    incorrectAssignedQuestions IncorrectAssignedQuestion[] 
}

model Admin {
    id                        String                    @id @default(uuid())
    name                      String?
    email                     String?                   @unique
    hashedPassword            String?
    createdAt                 DateTime                  @default(now())
    updatedAt                 DateTime?                 @updatedAt
    accounts                  AdminAccount[]            
    questions                 Question[]                
    notificationsSent         Notification[]            @relation("SentNotifications")
}

model StudentAccount {
    id                      String   @id @default(uuid())
    studentId               String
    type                    String
    Studentprovider         String
    StudentproviderAccountId String
    accessToken             String?
    expiresAt               DateTime?
    tokenType               String?
    student                 Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

    @@unique([Studentprovider, StudentproviderAccountId])
}

model AdminAccount {
    id                      String   @id @default(uuid())
    adminId                 String
    type                    String
    Adminprovider           String
    AdminproviderAccountId  String
    accessToken             String?
    expiresAt               DateTime?
    tokenType               String?
    admin                   Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

    @@unique([Adminprovider, AdminproviderAccountId])
}

model Question {
    id                        String                    @id @default(uuid())
    text                      String                   
    correctAnswer             String?                  
    createdBy                 Admin                    @relation(fields: [adminId], references: [id])
    adminId                   String                   
    level                     Int                      
    createdAt                 DateTime                 @default(now())
    updatedAt                 DateTime?                @updatedAt
    answers                   Answer[]                 
    assignedQuestions         AssignedQuestion[]       
    incorrectAssignedQuestions IncorrectAssignedQuestion[] 
}

model Answer {
    id               String     @id @default(uuid())
    student          Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
    studentId        String
    question         Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId       String
    isCorrect        Boolean?
    submittedAnswer  String?
    answeredAt       DateTime?

    @@unique([studentId, questionId])
}

model Notification {
    id               String    @id @default(uuid())
    message          String    
    isRead           Boolean   @default(false)
    createdAt        DateTime  @default(now())
    admin            Admin?    @relation("SentNotifications", fields: [adminId], references: [id], onDelete: SetNull)
    adminId          String?
    student          Student?  @relation(fields: [studentId], references: [id], onDelete: Cascade)
    studentId        String?
}

model AssignedQuestion {
    id          String    @id @default(uuid())
    studentId   String
    questionId  String
    isAnswered  Boolean   @default(false)
    isCorrect   Boolean?
    answeredAt  DateTime?
    question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
    student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

    @@unique([studentId, questionId])
}

model IncorrectAssignedQuestion {
    id          String    @id @default(uuid())
    studentId   String
    questionId  String
    isAnswered  Boolean   @default(false)
    isCorrect   Boolean?
    answeredAt  DateTime?
    question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
    student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

    @@unique([studentId, questionId])
}